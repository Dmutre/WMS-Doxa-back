generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id   String @id @default(uuid()) @db.VarChar(36)
  name String @unique

  roles RolePermissions[]

  @@map("permissions")
}

model Role {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isPreset  Boolean  @default(false) @map("is_preset")

  user        User[]
  permissions RolePermissions[]

  @@map("roles")
}

model RolePermissions {
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @map("role_id")

  @@id([permissionId, roleId])
  @@map("role_permissions")
}

enum StatusEnum {
  ACTIVE
  PASSIVE
  FIRED
}

model User {
  id            String     @id @default(uuid())
  roleId        String     @map("role_id")
  role          Role       @relation(fields: [roleId], references: [id])
  firstName     String     @map("first_name") @db.VarChar(255)
  lastName      String     @map("last_name") @db.VarChar(255)
  password      String
  email         String     @unique
  status        StatusEnum @default(ACTIVE)
  phone         String?
  birthDate     DateTime?  @map("birth_date")
  shiftSchedule Json?      @map("shift_schedule")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  tokens  Token[]
  actions UserAction[]
  warehouses      UserWarehouse[]

  @@map("users")
}

enum TokenType {
  REFRESH
  EMAIL_VERIFICATION
}

model Token {
  id        String    @id @default(uuid())
  value     String    @db.Text
  type      TokenType
  userId    String?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("tokens")
}

model UserAction {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  payload   Json
  action    String
  ip        String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_actions")
}

// Connecting users to warehouse. User can be connected to many warehouses
model UserWarehouse {
  user            User          @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId          String
  warehouse       Warehouse     @relation(references: [id], fields: [warehouseId], onDelete: Cascade)
  warehouseId     String

  @@id([userId, warehouseId])
  @@map("user_warehouses")
}

model Warehouse {
  id                String      @id @default(uuid())
  name              String
  type              String
  address           String
  coordinates       String?
  notes             String?
  area              Float?
  isActive          Boolean     @default(true)
  photo             String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  users             UserWarehouse[]

  @@unique([name, address])
  @@map("warehouses")
}
