generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id   String @id @default(uuid()) @db.VarChar(36)
  name String @unique

  roles RolePermissions[]

  @@map("permissions")
}

model Role {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isPreset  Boolean  @default(false) @map("is_preset")

  user        User[]
  permissions RolePermissions[]

  @@map("roles")
}

model RolePermissions {
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String     @map("role_id")

  @@id([permissionId, roleId])
  @@map("role_permissions")
}

enum StatusEnum {
  ACTIVE
  PASSIVE
  FIRED
}

model User {
  id            String     @id @default(uuid())
  roleId        String     @map("role_id")
  role          Role       @relation(fields: [roleId], references: [id])
  firstName     String     @map("first_name") @db.VarChar(255)
  lastName      String     @map("last_name") @db.VarChar(255)
  password      String
  email         String     @unique
  status        StatusEnum @default(ACTIVE)
  phone         String?
  birthDate     DateTime?  @map("birth_date")
  shiftSchedule Json?      @map("shift_schedule")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  tokens     Token[]
  actions    UserAction[]
  warehouses UserWarehouse[]
  tasks      Task[]          @relation("Assignee")
  reports    Task[]          @relation("Reporter")

  @@map("users")
}

enum TokenType {
  REFRESH
  EMAIL_VERIFICATION
}

model Token {
  id        String    @id @default(uuid())
  value     String    @db.Text
  type      TokenType
  userId    String?   @map("user_id")
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("tokens")
}

model UserAction {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  payload   Json
  action    String
  ip        String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_actions")
}

// Connecting users to warehouse. User can be connected to many warehouses
model UserWarehouse {
  user        User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId      String
  warehouse   Warehouse @relation(references: [id], fields: [warehouseId], onDelete: Cascade)
  warehouseId String

  @@id([userId, warehouseId])
  @@map("user_warehouses")
}

model Warehouse {
  id          String   @id @default(uuid())
  name        String
  type        String
  address     String
  coordinates String?
  notes       String?
  area        Float?
  isActive    Boolean  @default(true)
  photo       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  users   UserWarehouse[]
  batches Batch[]

  @@unique([name, address])
  @@map("warehouses")
}

model Item {
  id             String    @id @default(uuid())
  name           String
  sku            String    @unique
  description    String?
  barcode        String?   @unique
  weight         Float?
  dimensions     String?
  category       String?
  manufacturer   String?
  expirationDate DateTime?
  warrantyPeriod Int?      @map("warranty_period")
  originCountry  String?   @map("origin_country")
  photoUrl       String[]  @map("photo_url")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  batches Batch[]

  @@map("items")
}

model BatchDelivery {
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  deliveryId  String   @map("delivery_id")
  batch       Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId     String   @map("batch_id") @unique

  @@id([deliveryId, batchId])
  @@unique([deliveryId, batchId])
  @@map("batch_deliveries")
}

model Batch {
  id          String    @id @default(uuid())
  warehouseId String    @map("warehouse_id")
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  itemId      String    @map("item_id")
  item        Item      @relation(fields: [itemId], references: [id])
  quantity    Int
  row         Int?
  shelf       Int?
  position    Int?
  width       Float?
  height      Float?
  depth       Float?
  weight      Float?
  receivedAt  DateTime  @default(now()) @map("received_at")
  expiryDate  DateTime? @map("expiry_date")
  isReserved  Boolean   @default(false) @map("is_reserved")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  deliveries  BatchDelivery?

  @@map("batches")
}

enum TaskStatus {
  BACKLOG
  PLANNED
  IN_PROGRESS
  DONE
  CANCELED
}

model Task {
  id          String     @id @default(uuid())
  code        String     @default(dbgenerated("gen_code()")) @db.VarChar(10)
  title       String     @db.VarChar(255)
  description String?    @db.VarChar(4000)
  status      TaskStatus
  isOverdue   Boolean    @default(false) @map("is_overdue")
  priority    Int?
  estimate    Int?
  spent       Int?
  startDate   DateTime?  @map("start_date")
  dueDate     DateTime?  @map("due_date")
  assigneeId  String?    @map("assignee_id")
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporterId  String?    @map("reporter_id")
  reporter    User?      @relation("Reporter", fields: [reporterId], references: [id], onDelete: SetNull)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  @@map("tasks")
}

enum DeliveryType {
  INCOMING
  OUTGOING
}

enum DeliveryStatus {
  SCHEDULED
  LOADING
  IN_TRANSIT
  DELIVERED
  SHIPPED
  CANCELED
  UNRESOLVED
}

model Delivery {
  id             String         @id @default(uuid())
  type           DeliveryType
  status         DeliveryStatus
  scheduledAt    DateTime
  completedAt    DateTime?
  description    String?        @db.VarChar(1000)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")


  batches        BatchDelivery[]

  @@map("deliveries")
}